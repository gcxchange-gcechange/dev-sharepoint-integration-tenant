"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateExternalLinkTeamsDeepLinkTarget = exports.updateSubmitActionButtonType = exports.createAction = exports.parseButtonsToAction = exports.appendActions = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var Strings_resx_1 = tslib_1.__importDefault(require("../../loc/Strings.resx"));
var Killswitches_1 = require("../../common/Killswitches");
/**
 *  This regex is used to get URI that starts with `/l/entity/`.
 *  EX: `https://teams.microsoft.com/l/entity/abcd-01234/0` -> `/l/entity/abcd-01234/0`
 */
var TEAMS_DEEP_LINK_REGEX = new RegExp(/(?=.+)(\/l\/entity\/.+)/gi);
// Maps card size to max number of actions that can be appended.
var SIZE_TO_ACTION_NUM_MAP = {
    Medium: 1,
    Large: 2
};
// tslint:disable-next-line:export-name
function appendActions(template, buttons, size, deviceContext, templateType, instanceId) {
    if (!(0, Killswitches_1.isRefactorParseCardButtonsToAction)()) {
        var actions = buttons && parseButtonsToAction(buttons, templateType, size, deviceContext, instanceId);
        if (actions) {
            template.actions = actions;
        }
    }
    else {
        var actions = [];
        var limit = Math.min(SIZE_TO_ACTION_NUM_MAP[size], (buttons === null || buttons === void 0 ? void 0 : buttons.length) || 0);
        for (var i = 0; i < limit; i++) {
            var cardButton = buttons[i];
            var actionId = cardButton.id
                ? cardButton.id
                : !(0, Killswitches_1.isGenerateUniqueButtonIdKSActivated)()
                    ? "ac-button-".concat(instanceId, "-").concat(i)
                    : "ac-button-".concat(i);
            actions.push(createAction(deviceContext, cardButton.action, actionId, cardButton.title, cardButton.style));
        }
        template.actions = actions;
    }
}
exports.appendActions = appendActions;
function parseButtonsToAction(buttons, templateType, cardSize, deviceContext, instanceId) {
    var filteredButtons = filterButtons(buttons, templateType, cardSize);
    if (!filteredButtons) {
        return undefined;
    }
    return filteredButtons.map(function (button, index) {
        var actionId = button.id
            ? button.id
            : !(0, Killswitches_1.isGenerateUniqueButtonIdKSActivated)()
                ? "ac-button-".concat(instanceId, "-").concat(index)
                : "ac-button-".concat(index);
        return createAction(deviceContext, button.action, actionId, button.title, button.style);
    });
}
exports.parseButtonsToAction = parseButtonsToAction;
function filterButtons(buttons, templateType, cardSize) {
    if ((templateType === 'Image' && cardSize === 'Medium') || buttons === undefined) {
        return undefined;
    }
    var filteredButtons = [];
    var limit = Math.min(SIZE_TO_ACTION_NUM_MAP[cardSize], buttons.length);
    for (var i = 0; i < limit; i++) {
        filteredButtons.push(buttons[i]);
    }
    return filteredButtons;
}
function createAction(deviceContext, buttonType, actionId, title, style) {
    var cardAction;
    if (buttonType.type === 'Submit') {
        updateSubmitActionButtonType(buttonType);
        cardAction = {
            id: actionId,
            type: 'Action.Submit',
            style: style,
            title: title,
            data: buttonType.parameters || undefined
        };
    }
    else if (buttonType.type === 'ExternalLink') {
        if ((0, Killswitches_1.isDisableMSTeamsDeepLinkTransformationKSActivated)()) {
            updateExternalLinkTeamsDeepLinkTarget(buttonType.parameters, deviceContext);
        }
        var url = buttonType.parameters.target;
        if (!url || url === '') {
            throw new Error(sp_core_library_1.Text.format(Strings_resx_1.default.TargetUrlIsUndefinedOrEmpty, actionId));
        }
        cardAction = {
            id: actionId,
            type: 'Action.OpenUrl',
            style: style,
            title: title,
            url: url
        };
    }
    else if (buttonType.type === 'QuickView') {
        var data = {
            _internalQuickViewId: buttonType.parameters.view
        };
        cardAction = {
            id: actionId,
            type: 'Action.Submit',
            style: style,
            title: title,
            data: data
        };
    }
    else if (buttonType.type === 'VivaAction.SelectMedia') {
        var parameters = buttonType.parameters;
        cardAction = {
            id: actionId,
            type: 'VivaAction.SelectMedia',
            style: style,
            title: title,
            parameters: parameters
        };
    }
    else if (buttonType.type === 'VivaAction.GetLocation') {
        var parameters = buttonType.parameters;
        cardAction = {
            id: actionId,
            type: 'VivaAction.GetLocation',
            style: style,
            title: title,
            parameters: parameters
        };
    }
    else if (buttonType.type === 'VivaAction.ShowLocation') {
        var parameters = buttonType.parameters;
        cardAction = {
            id: actionId,
            type: 'VivaAction.ShowLocation',
            style: style,
            title: title,
            parameters: parameters
        };
    }
    return cardAction;
}
exports.createAction = createAction;
/**
 * Inserts confirmation dialog into action.parameters as __MSConfirmationDialog__
 * @param action - ISubmitCardAction
 */
function updateSubmitActionButtonType(action) {
    if (action.confirmationDialog) {
        if (!action.parameters) {
            action.parameters = {};
        }
        action.parameters.__MSConfirmationDialog__ = action.confirmationDialog;
    }
}
exports.updateSubmitActionButtonType = updateSubmitActionButtonType;
/**
 * Updates externalLinkParameters.target to `msteams` prefix if the device is WebView and is a teams deep link.
 * Deprecate with graduation of isDisableMSTeamsDeepLinkTransformationKSActivated
 *
 * @param externalLinkParameters - External link parameters
 * @param deviceContext - Device Context
 *
 */
function updateExternalLinkTeamsDeepLinkTarget(externalLinkParameters, deviceContext) {
    if (externalLinkParameters &&
        externalLinkParameters.isTeamsDeepLink &&
        _isValidMSTeamsDeviceContext(deviceContext)) {
        var result = externalLinkParameters.target.match(TEAMS_DEEP_LINK_REGEX);
        if (result && result[0]) {
            externalLinkParameters.target = "msteams:".concat(result[0]);
        }
    }
}
exports.updateExternalLinkTeamsDeepLinkTarget = updateExternalLinkTeamsDeepLinkTarget;
/**
 * Determines if device context is appropriate to generate msteams:// prefix deeplink
 * @param deviceContext - DeviceContext
 * @returns - boolean
 */
function _isValidMSTeamsDeviceContext(deviceContext) {
    return deviceContext !== 'Mobile';
}
//# sourceMappingURL=actionButtonHelper.js.map